// <auto-generated />
using System;
using EStore.BusinessObject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EStore.BusinessObject.Migrations
{
    [DbContext(typeof(FstoreDbContext))]
    partial class FstoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EStore.BusinessObject.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Food"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Drink"
                        });
                });

            modelBuilder.Entity("EStore.BusinessObject.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("MemberId");

                    b.ToTable("Member", (string)null);

                    b.HasData(
                        new
                        {
                            MemberId = 1,
                            City = "HCM",
                            CompanyName = "KMS",
                            Country = "Viet nam",
                            Email = "member1@fstore.com",
                            Password = "1"
                        },
                        new
                        {
                            MemberId = 2,
                            City = "HCM",
                            CompanyName = "CyberSoft",
                            Country = "Viet nam",
                            Email = "member2@fstore.com",
                            Password = "1"
                        },
                        new
                        {
                            MemberId = 3,
                            City = "HCM",
                            CompanyName = "CyberSoft",
                            Country = "Viet nam",
                            Email = "1",
                            Password = "1"
                        });
                });

            modelBuilder.Entity("EStore.BusinessObject.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<decimal?>("Freight")
                        .HasColumnType("money");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime");

                    b.HasKey("OrderId");

                    b.HasIndex("MemberId");

                    b.ToTable("Order", (string)null);

                    b.HasData(
                        new
                        {
                            OrderId = 4665,
                            Freight = 10000m,
                            MemberId = 1,
                            OrderDate = new DateTime(2021, 11, 5, 12, 5, 7, 677, DateTimeKind.Unspecified),
                            RequiredDate = new DateTime(2021, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(2021, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderId = 6113,
                            Freight = 20000m,
                            MemberId = 2,
                            OrderDate = new DateTime(2021, 11, 5, 14, 4, 7, 950, DateTimeKind.Unspecified),
                            RequiredDate = new DateTime(2021, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(2021, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderId = 6259,
                            Freight = 15000m,
                            MemberId = 1,
                            OrderDate = new DateTime(2021, 11, 5, 14, 2, 50, 557, DateTimeKind.Unspecified),
                            RequiredDate = new DateTime(2021, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(2021, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderId = 4,
                            Freight = 10m,
                            MemberId = 1,
                            OrderDate = new DateTime(2023, 9, 21, 19, 2, 12, 670, DateTimeKind.Local).AddTicks(6080),
                            RequiredDate = new DateTime(2023, 9, 28, 19, 2, 12, 670, DateTimeKind.Local).AddTicks(6089),
                            ShippedDate = new DateTime(2023, 9, 28, 19, 2, 12, 670, DateTimeKind.Local).AddTicks(6094)
                        },
                        new
                        {
                            OrderId = 5,
                            Freight = 10m,
                            MemberId = 2,
                            OrderDate = new DateTime(2023, 9, 21, 19, 2, 12, 670, DateTimeKind.Local).AddTicks(6095),
                            RequiredDate = new DateTime(2023, 9, 28, 19, 2, 12, 670, DateTimeKind.Local).AddTicks(6096),
                            ShippedDate = new DateTime(2023, 9, 28, 19, 2, 12, 670, DateTimeKind.Local).AddTicks(6096)
                        },
                        new
                        {
                            OrderId = 6,
                            Freight = 10m,
                            MemberId = 2,
                            OrderDate = new DateTime(2023, 9, 21, 19, 2, 12, 670, DateTimeKind.Local).AddTicks(6098),
                            RequiredDate = new DateTime(2023, 9, 28, 19, 2, 12, 670, DateTimeKind.Local).AddTicks(6098),
                            ShippedDate = new DateTime(2023, 9, 28, 19, 2, 12, 670, DateTimeKind.Local).AddTicks(6099)
                        },
                        new
                        {
                            OrderId = 7,
                            Freight = 10m,
                            MemberId = 2,
                            OrderDate = new DateTime(2023, 9, 21, 19, 2, 12, 670, DateTimeKind.Local).AddTicks(6100),
                            RequiredDate = new DateTime(2023, 9, 28, 19, 2, 12, 670, DateTimeKind.Local).AddTicks(6101),
                            ShippedDate = new DateTime(2023, 9, 28, 19, 2, 12, 670, DateTimeKind.Local).AddTicks(6102)
                        });
                });

            modelBuilder.Entity("EStore.BusinessObject.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);

                    b.HasData(
                        new
                        {
                            OrderId = 4665,
                            ProductId = 1,
                            Discount = 5.0,
                            Quantity = 1,
                            UnitPrice = 20000m
                        },
                        new
                        {
                            OrderId = 6113,
                            ProductId = 4,
                            Discount = 10.0,
                            Quantity = 3,
                            UnitPrice = 10000m
                        },
                        new
                        {
                            OrderId = 6113,
                            ProductId = 5,
                            Discount = 15.0,
                            Quantity = 4,
                            UnitPrice = 15000m
                        },
                        new
                        {
                            OrderId = 6259,
                            ProductId = 2,
                            Discount = 5.0,
                            Quantity = 2,
                            UnitPrice = 300000m
                        },
                        new
                        {
                            OrderId = 6259,
                            ProductId = 4,
                            Discount = 5.0,
                            Quantity = 2,
                            UnitPrice = 10000m
                        });
                });

            modelBuilder.Entity("EStore.BusinessObject.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            ProductName = "Candy",
                            UnitPrice = 20000m,
                            UnitsInStock = 19,
                            Weight = "500g"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            ProductName = "Mixed Candy",
                            UnitPrice = 300000m,
                            UnitsInStock = 18,
                            Weight = "300g"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            ProductName = "Cake",
                            UnitPrice = 15000m,
                            UnitsInStock = 40,
                            Weight = "200g"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            ProductName = "Pepsi",
                            UnitPrice = 10000m,
                            UnitsInStock = 45,
                            Weight = "250ml"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            ProductName = "Snack Oshi's",
                            UnitPrice = 15000m,
                            UnitsInStock = 31,
                            Weight = "100g"
                        });
                });

            modelBuilder.Entity("EStore.BusinessObject.Models.Order", b =>
                {
                    b.HasOne("EStore.BusinessObject.Models.Member", "Member")
                        .WithMany("Orders")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("EStore.BusinessObject.Models.OrderDetail", b =>
                {
                    b.HasOne("EStore.BusinessObject.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EStore.BusinessObject.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EStore.BusinessObject.Models.Product", b =>
                {
                    b.HasOne("EStore.BusinessObject.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EStore.BusinessObject.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EStore.BusinessObject.Models.Member", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EStore.BusinessObject.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EStore.BusinessObject.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
